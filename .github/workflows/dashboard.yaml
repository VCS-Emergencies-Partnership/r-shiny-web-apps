# This is an example for building the Docker image. This
# can be copy/pasted to create new applications, changing
# values where appropriate (look for "CHANGE")
#
# Even though environment variables are used, they cannot be
# used in all sections of the workflow configuration.

name: Dashboard

env:
  IMAGE_NAME: dashboard

on:
  push:
    paths:
      - packages/dashboard/**/*
      - .github/workflows/dashboard.yaml

defaults:
  run:
    working-directory: packages/dashboard

## No changes required from here
jobs:
  build:
    runs-on: ubuntu-latest
    if: "! contains(toJSON(github.event.commits.*.message), '[ci skip]')"
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Login to Docker registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.CONTAINER_REGISTRY_SERVER }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Infuse with secrets
        run: |
          echo "CHARITY_BASE_API_KEY=${{ secrets.CHARITY_BASE_API_KEY }}
          BLOB_SAS=${{ secrets.BLOB_SAS }}
          BLOB_ENDPOINT=${{ secrets.BLOB_ENDPOINT }}" >> .Renviron

      - name: Generate image tag
        id: tag
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "::set-output name=branch::$BRANCH"

          CLEAN_TAG=$(echo $BRANCH | tr "/" "-")
          DOCKER_TAG=$CLEAN_TAG
          [ "$CLEAN_TAG" == "main" ] && DOCKER_TAG=latest

          echo "::set-output name=docker_tag::$DOCKER_TAG"

      - name: Tag name
        run: echo ${{ steps.tag.outputs.docker_tag }}

      # In this step, this action saves a list of existing images,
      # the cache is created without them in the post run.
      # It also restores the cache if it exists.
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - name: Build Docker image
        run: docker build -t
          ${{ secrets.CONTAINER_REGISTRY_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.docker_tag }}
          .

      - name: Publish Docker image
        run: docker push
          ${{ secrets.CONTAINER_REGISTRY_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.docker_tag }}
